require "rails_helper"

RSpec.describe ChangeCaseCoronavirusStatus, :with_stubbed_elasticsearch, :with_test_queue_adapter do
  describe ".call" do
    # Create the case before test run to ensure we only check activity generated by the test
    subject(:result) { described_class.call(investigation: investigation, status: new_status, user: user) }

    let!(:investigation) { create(:enquiry, coronavirus_related: previous_status) }

    let(:previous_status) { false }
    let(:new_status) { true }
    let(:user) { create(:user, :activated) }

    context "with no investigation parameter" do
      subject(:result) { described_class.call(user: user, status: new_status) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "with no user parameter" do
      subject(:result) { described_class.call(investigation: investigation, status: new_status) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "with no status parameter" do
      subject(:result) { described_class.call(investigation: investigation, user: user) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "when the previous coronavirus status and the new status are the same" do
      let(:new_status) { previous_status }

      it "succeeds" do
        expect(result).to be_success
      end

      it "does not create a new activity" do
        expect { result }.not_to change(Activity, :count)
      end

      it "does not send an email" do
        expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
      end

      it "does not set the updated status in the result context" do
        expect(result.changes_made).to be false
      end
    end

    context "when the previous coronavirus status and the new status are different" do
      it "succeeds" do
        expect(result).to be_success
      end

      it "changes the coronavirus status for the investigation" do
        expect { result }.to change(investigation, :coronavirus_related).from(previous_status).to(new_status)
      end

      it "creates a new activity for the change", :aggregate_failures do
        expect { result }.to change(Activity, :count).by(1)
        activity = investigation.reload.activities.first
        expect(activity).to be_a(AuditActivity::Investigation::UpdateCoronavirusStatus)
        expect(activity.source.user).to eq(user)
        expect(activity.metadata).to include(
          "updates" => { "coronavirus_related" => [previous_status, new_status] }
        )
      end

      context "when the user is the case owner" do
        before { ChangeCaseOwner.call!(investigation: investigation, owner: user, user: user) }

        it "does not send an email" do
          expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
        end
      end

      context "when the user's team is the case owner" do
        before { ChangeCaseOwner.call!(investigation: investigation, owner: user.team, user: user) }

        it "does not send an email" do
          expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
        end
      end

      context "when the case owner is a user on the same team" do
        let(:user_same_team) { create(:user, :activated, team: user.team, organisation: user.organisation) }

        before { ChangeCaseOwner.call!(investigation: investigation, owner: user_same_team, user: user) }

        it "sends an email to the user" do
          expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(a_hash_including(args: [
            investigation.pretty_id,
            user_same_team.name,
            user_same_team.email,
            "Enquiry #{investigation.pretty_id} is related to the coronavirus outbreak. This status was updated by #{user.name}.",
            expected_email_subject
          ]))
        end
      end

      context "when the user is on a different team to the case owner" do
        let(:user_other_team) { create(:user, :activated, team: other_team) }
        let(:other_team) { create(:team) }

        context "when the owner is a user" do
          before { ChangeCaseOwner.call!(investigation: investigation, owner: user_other_team, user: user) }

          it "sends an email to the user" do
            expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(a_hash_including(args: [
              investigation.pretty_id,
              user_other_team.name,
              user_other_team.email,
              "Enquiry #{investigation.pretty_id} is related to the coronavirus outbreak. This status was updated by #{user.name} (#{user.team.name}).",
              expected_email_subject
            ]))
          end
        end

        context "when the owner is a team" do
          before { ChangeCaseOwner.call!(investigation: investigation, owner: other_team, user: user) }

          it "sends an email to the team email" do
            expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(a_hash_including(args: [
              investigation.pretty_id,
              other_team.name,
              other_team.email,
              "Enquiry #{investigation.pretty_id} is related to the coronavirus outbreak. This status was updated by #{user.name} (#{user.team.name}).",
              expected_email_subject
            ]))
          end

          context "when the owner team does not have an email address" do
            let(:other_team) { create(:team, team_recipient_email: nil) }

            # Create an inactive user to test email is not delivered to them
            before { create(:user, team: other_team, organisation: other_team.organisation) }

            it "sends an email to each of the team's active users" do
              expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(a_hash_including(args: [
                investigation.pretty_id,
                user_other_team.name,
                user_other_team.email,
                "Enquiry #{investigation.pretty_id} is related to the coronavirus outbreak. This status was updated by #{user.name} (#{user.team.name}).",
                expected_email_subject
              ]))
            end
          end
        end
      end

      it "sets the updated coronavirus status in the result context" do
        expect(result.changes_made).to be true
      end
    end
  end

  def expected_email_subject
    "Coronavirus status updated on enquiry"
  end
end
