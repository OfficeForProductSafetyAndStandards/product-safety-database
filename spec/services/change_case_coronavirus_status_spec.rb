require "rails_helper"

RSpec.describe ChangeCaseCoronavirusStatus, :with_stubbed_elasticsearch, :with_test_queue_adapter do
  describe ".call" do
    # Create the case before test run to ensure we only check activity generated by the test
    subject(:result) { described_class.call(investigation: investigation, status: new_status, user: user) }

    let!(:investigation) { create(:enquiry, coronavirus_related: previous_status) }

    let(:previous_status) { false }
    let(:new_status) { true }
    let(:user) { create(:user, :activated) }

    context "with no investigation parameter" do
      subject(:result) { described_class.call(user: user, status: new_status) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "with no user parameter" do
      subject(:result) { described_class.call(investigation: investigation, status: new_status) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "with no status parameter" do
      subject(:result) { described_class.call(investigation: investigation, user: user) }

      it "fails" do
        expect(result).to be_failure
      end
    end

    context "when the previous coronavirus status and the new status are the same" do
      let(:new_status) { previous_status }

      it "succeeds" do
        expect(result).to be_success
      end

      it "does not create a new activity" do
        expect { result }.not_to change(Activity, :count)
      end

      it "does not send an email" do
        expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
      end

      it "does not set the updated status in the result context" do
        expect(result.changes_made).to be false
      end
    end

    context "when the previous coronavirus status and the new status are different" do
      def expected_email_subject
        "Coronavirus status updated on enquiry"
      end

      def expected_email_body(name)
        "Enquiry #{investigation.pretty_id} is related to the coronavirus outbreak. This status was updated by #{name}."
      end

      it "succeeds" do
        expect(result).to be_success
      end

      it "changes the coronavirus status for the investigation" do
        expect { result }.to change(investigation, :coronavirus_related).from(previous_status).to(new_status)
      end

      it "creates a new activity for the change", :aggregate_failures do
        expect { result }.to change(Activity, :count).by(1)
        activity = investigation.reload.activities.first
        expect(activity).to be_a(AuditActivity::Investigation::UpdateCoronavirusStatus)
        expect(activity.source.user).to eq(user)
        expect(activity.metadata).to include(
          "updates" => { "coronavirus_related" => [previous_status, new_status] }
        )
      end

      it_behaves_like "a service which notifies the case owner"

      it "sets the updated coronavirus status in the result context" do
        expect(result.changes_made).to be true
      end
    end
  end
end
