require "rails_helper"

RSpec.describe ChangeCaseSummary, :with_stubbed_elasticsearch, :with_test_queue_adapter do
  # Create the investigation up front so we can check which activities are generated by the service
  let!(:investigation) { create(:enquiry, description: old_summary) }
  let(:old_summary) { "Old summary" }
  let(:new_summary) { "New summary" }
  let(:user) { create(:user, :activated) }

  describe ".call" do
    context "with no parameters" do
      let(:result) { described_class.call }

      it "returns a failure" do
        expect(result).to be_failure
      end
    end

    context "with no investigation parameter" do
      let(:result) { described_class.call(summary: new_summary, user: user) }

      it "returns a failure" do
        expect(result).to be_failure
      end
    end

    context "with no user parameter" do
      let(:result) { described_class.call(summary: new_summary, investigation: investigation) }

      it "returns a failure" do
        expect(result).to be_failure
      end
    end

    context "with no summary parameter" do
      let(:result) { described_class.call(investigation: investigation, user: user) }

      it "returns a failure" do
        expect(result).to be_failure
      end
    end

    context "with required parameters" do
      let(:result) { described_class.call(investigation: investigation, user: user, summary: new_summary) }

      it "returns success" do
        expect(result).to be_success
      end

      context "when the new summary is the same as the old summary" do
        let(:new_summary) { old_summary }

        it "returns success" do
          expect(result).to be_success
        end

        it "does not create an audit activity" do
          expect { result }.not_to change(Activity, :count)
        end

        it "does not send an email" do
          expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
        end
      end

      it "changes the case summary" do
        expect { result }.to change(investigation, :description).from(old_summary).to(new_summary)
      end

      it "creates an audit activity for summary changed", :aggregate_failures do
        expect { result }.to change(Activity, :count).by(1)
        activity = investigation.reload.activities.first
        expect(activity).to be_a(AuditActivity::Investigation::UpdateSummary)
        expect(activity.source.user).to eq(user)
        expect(activity.metadata).to eq({ "updates" => { "description" => ["Old summary", "New summary"] } })
      end

      context "when the user is the case owner" do
        before { ChangeCaseOwner.call!(investigation: investigation, owner: user, user: user) }

        it "does not send an email" do
          expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
        end
      end

      context "when the user's team is the case owner" do
        before { ChangeCaseOwner.call!(investigation: investigation, owner: user.team, user: user) }

        it "does not send an email" do
          expect { result }.not_to have_enqueued_mail(NotifyMailer, :investigation_updated)
        end
      end

      context "when the case owner is a user on the same team" do
        let(:user_same_team) { create(:user, :activated, team: user.team, organisation: user.organisation) }

        before { ChangeCaseOwner.call!(investigation: investigation, owner: user_same_team, user: user) }

        it "sends an email to the user" do
          expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(
            investigation.pretty_id,
            user_same_team.name,
            user_same_team.email,
            "Enquiry summary was updated by #{user.name}.",
            expected_email_subject
          )
        end
      end

      context "when the user is on a different team to the case owner" do
        let(:user_other_team) { create(:user, :activated, team: other_team) }
        let(:other_team) { create(:team) }

        context "when the owner is a user" do
          before { ChangeCaseOwner.call!(investigation: investigation, owner: user_other_team, user: user) }

          it "sends an email to the user" do
            expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(
              investigation.pretty_id,
              user_other_team.name,
              user_other_team.email,
              "Enquiry summary was updated by #{user.name} (#{user.team.name}).",
              expected_email_subject
            )
          end
        end

        context "when the owner is a team" do
          before { ChangeCaseOwner.call!(investigation: investigation, owner: other_team, user: user) }

          it "sends an email to the team email" do
            expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(
              investigation.pretty_id,
              other_team.name,
              other_team.email,
              "Enquiry summary was updated by #{user.name} (#{user.team.name}).",
              expected_email_subject
            )
          end

          context "when the owner team does not have an email address" do
            let(:other_team) { create(:team, team_recipient_email: nil) }

            # Create an inactive user to test email is not delivered to them
            before { create(:user, team: other_team, organisation: other_team.organisation) }

            it "sends an email to each of the team's active users" do
              expect { result }.to have_enqueued_mail(NotifyMailer, :investigation_updated).with(
                investigation.pretty_id,
                user_other_team.name,
                user_other_team.email,
                "Enquiry summary was updated by #{user.name} (#{user.team.name}).",
                expected_email_subject
              )
            end
          end
        end
      end
    end
  end

  def expected_email_subject
    "Enquiry summary updated"
  end
end
