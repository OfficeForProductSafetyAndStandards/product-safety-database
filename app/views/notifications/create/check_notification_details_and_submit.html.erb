<%= page_title(t("notifications.create.index.sections.submit.tasks.check_notification_details_and_submit.title"), errors: false) %>
<div class="govuk-grid-row">
  <div class="govuk-grid-column-two-thirds">
    <h1 class="govuk-heading-l">
      <span class="govuk-caption-l"><%= t("notifications.create.index.sections.submit.title") %></span>
      <%= t("notifications.create.index.sections.submit.tasks.check_notification_details_and_submit.title") %>
    </h1>
    <%= govuk_inset_text do %>
      <p class="govuk-body">For</p>
      <ul class="govuk-list">
        <% @notification.investigation_products.decorate.each do |investigation_product| %>
          <li class="govuk-body-l"><%= sanitize(investigation_product.product.name_with_brand) %></li>
        <% end %>
      </ul>
    <% end %>
    <h2 class="govuk-heading-m">Notification details</h2>
    <%=
      govuk_summary_list do |summary_list|
        summary_list.with_row do |row|
          row.with_key(text: "Notification number")
          row.with_value(text: @notification.pretty_id)
        end
        summary_list.with_row do |row|
          row.with_key(text: "Notification title")
          row.with_value(text: sanitize(@notification.user_title))
          row.with_action(text: "Change", href: wizard_path(:add_notification_details), visually_hidden_text: "notification title")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Notification summary")
          row.with_value(text: sanitize(@notification.description.presence || "Not provided"), classes: "opss-text-limit-scroll-s")
          row.with_action(text: "Change", href: wizard_path(:add_notification_details), visually_hidden_text: "notification summary")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Notification reason")
          row.with_value(text: sanitize(@notification.safe_and_compliant? ? "Safe and compliant product(s)" : "Unsafe or non-compliant product(s)"))
          row.with_action(text: "Change", href: wizard_path(:add_notification_details), visually_hidden_text: "notification reason")
        end
        unless @notification&.reported_reason&.safe_and_compliant?
          summary_list.with_row do |row|
            row.with_key(text: "Specific product safety issues")
            row.with_value(text: sanitize(specific_product_safety_issues).html_safe)
            row.with_action(text: "Change", href: wizard_path(:add_product_safety_and_compliance_details), visually_hidden_text: "specific product safety issues")
          end
        end
        summary_list.with_row do |row|
          row.with_key(text: "Reported by overseas regulator")
          row.with_value(text: sanitize(@notification.is_from_overseas_regulator ? "Yes: #{country_from_code(@notification.notifying_country)}" : "No"))
          row.with_action(text: "Change", href: wizard_path(:add_product_safety_and_compliance_details), visually_hidden_text: "reported by overseas regulator")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Internal reference number")
          row.with_value(text: sanitize(@notification.complainant_reference.presence || "Not provided"))
          row.with_action(text: "Change", href: wizard_path(:add_product_safety_and_compliance_details), visually_hidden_text: "internal reference number")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Number of affected products")
          row.with_value(text: sanitize(number_of_affected_units(@notification.investigation_products)).html_safe)
          row.with_action(text: "Change", href: wizard_path(:add_number_of_affected_units), visually_hidden_text: "number of affected products")
        end
      end
    %>
    <h2 class="govuk-heading-m">Product identification details</h2>
    <% @notification.investigation_products.decorate.each do |investigation_product| %>
      <%=
        govuk_summary_list(
          card: { title: sanitize(investigation_product.product.name_with_brand) },
          rows: [
            {
              key: { text: "Batch numbers" },
              value: { text: sanitize(investigation_product.batch_number.presence || "Not provided") },
              actions: [
                {
                  text: "Change",
                  href: batch_numbers_notification_create_index_path(@notification, investigation_product.id),
                  visually_hidden_text: "batch numbers"
                }
              ]
            },
            {
              key: { text: "Customs codes" },
              value: { text: sanitize(investigation_product.customs_code.presence || "Not provided") },
              actions: [
                {
                  text: "Change",
                  href: customs_codes_notification_create_index_path(@notification, investigation_product.id),
                  visually_hidden_text: "customs codes"
                }
              ]
            },
            {
              key: { text: "Unique Consignment Reference (UCR) numbers" },
              value: { text: sanitize(investigation_product.ucr_numbers.pluck(:number).join(", ").presence || "Not provided") },
              actions: [
                {
                  text: "Change",
                  href: ucr_numbers_notification_create_index_path(@notification, investigation_product.id),
                  visually_hidden_text: "unique consignment reference numbers"
                }
              ]
            }
          ]
        )
      %>
    <% end %>
    <h2 class="govuk-heading-m">Businesses and their role in the supply chain</h2>
    <% @notification.investigation_businesses.decorate.each do |investigation_business| %>
      <%=
        govuk_summary_list(
          card: { title: sanitize(investigation_business.business.trading_name) },
          rows: [
            {
              key: { text: "Business role in the supply chain" },
              value: { text: sanitize(investigation_business.pretty_relationship.presence || "Not provided") },
              actions: []
            },
            {
              key: { text: "Registered or legal name" },
              value: { text: sanitize(investigation_business.business.legal_name.presence || "Not provided") },
              actions: []
            },
            {
              key: { text: "Companies House number" },
              value: { text: sanitize(investigation_business.business.company_number.presence || "Not provided") },
              actions: []
            },
            {
              key: { text: "Address" },
              value: { text: sanitize(formatted_business_address(investigation_business.business.locations.find_by(name: "Registered office address"))).presence || "Not provided" },
              actions: []
            },
            {
              key: { text: "Contact details" },
              value: { text: investigation_business.business.contacts.map { |contact| sanitize(formatted_business_contact(contact)) }.join("<br><br>").html_safe.presence || "Not provided" },
              actions: []
            }
          ]
        )
      %>
    <% end %>
    <h2 class="govuk-heading-m">Evidence</h2>
    <% @notification.investigation_products.decorate.each do |investigation_product| %>
      <%=
        govuk_summary_list(
          card: { title: sanitize(investigation_product.product.name_with_brand) },
          rows: [
            {
              key: { text: "Test reports" },
              value: { text: sanitize(formatted_test_results(investigation_product.test_results)).html_safe.presence || "Not provided" },
              actions: [
                {
                  text: "Change",
                  href: wizard_path(:add_test_reports),
                  visually_hidden_text: "test reports"
                }
              ]
            },
            {
              key: { text: "Risk assessments" },
              value: { text: sanitize(formatted_risk_assessments(investigation_product.prism_risk_assessments, investigation_product.risk_assessments, nil)).html_safe.presence || "Not provided" },
              actions: [
                {
                  text: "Change",
                  href: wizard_path(:add_risk_assessments),
                  visually_hidden_text: "risk assessments"
                }
              ]
            }
          ]
        )
      %>
    <% end %>
    <%=
      govuk_summary_list do |summary_list|
        summary_list.with_row do |row|
          row.with_key(text: "Supporting images")
          row.with_value(text: sanitize(formatted_uploads(@notification.image_uploads.map(&:file_upload))).html_safe.presence || "Not provided")
          row.with_action(text: "Add or Remove", href: wizard_path(:add_supporting_images), visually_hidden_text: "supporting images")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Supporting documents")
          row.with_value(text: sanitize(formatted_uploads(@notification.documents)).html_safe.presence || "Not provided")
          row.with_action(text: "Change", href: wizard_path(:add_supporting_documents), visually_hidden_text: "supporting documents")
        end
        summary_list.with_row do |row|
          row.with_key(text: "Notification risk level")
          row.with_value(text: sanitize(risk_level_tag))
          row.with_action(text: "Change", href: wizard_path(:determine_notification_risk_level), visually_hidden_text: "notification risk level")
        end
      end
    %>
    <h2 class="govuk-heading-m">Corrective actions</h2>
    <% if @notification.corrective_action_taken_yes? %>
      <% if @notification.corrective_actions.present? %>
        <% @notification.corrective_actions.includes(investigation_product: :product).decorate.each do |corrective_action| %>
          <%=
            govuk_summary_list(
              card: {
                title: sanitize(corrective_action.investigation_product.product.decorate.name_with_brand),
                actions: [govuk_link_to("Change", with_entity_notification_create_index_path(@notification, entity_id: corrective_action.id))]
              },
              rows: [
                {
                  key: { text: "Corrective action" },
                  value: { text: sanitize(corrective_action.page_title) }
                },
                {
                  key: { text: "Effective date" },
                  value: { text: sanitize(corrective_action.date_of_activity) }
                },
                {
                  key: { text: "Legislation" },
                  value: { text: sanitize(corrective_action.legislation) }
                },
                {
                  key: { text: "Responsible business" },
                  value: { text: sanitize(corrective_action.business&.trading_name.presence || "Not provided") }
                },
                if corrective_action.recall_of_the_product_from_end_users?
                  {
                    key: { text: "Recall information" },
                    value: { text: sanitize(corrective_action.has_online_recall_information == "has_online_recall_information_yes" ? "Yes: #{sanitize(corrective_action.online_recall_information)}" : "No") }
                  }
                end,
                {
                  key: { text: "Action type" },
                  value: { text: sanitize(corrective_action.measure_type) }
                },
                {
                  key: { text: "Geographic scope" },
                  value: { text: sanitize(corrective_action.geographic_scopes) }
                },
                {
                  key: { text: "Further details" },
                  value: { text: sanitize(corrective_action.details.presence || "Not provided") }
                },
                {
                  key: { text: "Related file" },
                  value: { text: sanitize(formatted_uploads([corrective_action.document])).html_safe.presence || "Not provided" }
                }
              ].compact
            )
          %>
        <% end %>
      <% else %>
        <%=
          govuk_summary_list do |summary_list|
            summary_list.with_row do |row|
              row.with_key(text: "Corrective action taken?")
              row.with_value(text: "Yes")
              row.with_action(text: "Add", href: wizard_path(:record_a_corrective_action), visually_hidden_text: "a corrective action")
            end
          end
        %>
      <% end %>
    <% else %>
      <%=
        govuk_summary_list do |summary_list|
          summary_list.with_row do |row|
            row.with_key(text: "Corrective action taken?")
            row.with_value(text: "No: #{sanitize(corrective_action_not_taken_reasons)}")
            row.with_action(text: "Change", href: wizard_path(:record_a_corrective_action), visually_hidden_text: "corrective action taken")
          end
        end
      %>
    <% end %>
    <%= form_with url: request.fullpath, method: :patch, builder: GOVUKDesignSystemFormBuilder::FormBuilder do |f| %>
      <%= f.govuk_submit "Submit notification", name: "final", value: "true" do %>
        <%= f.govuk_submit "Save as draft", secondary: true, name: "draft", value: "true" %>
      <% end %>
    <% end %>
  </div>
</div>
