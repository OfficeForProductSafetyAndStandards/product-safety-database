module Notifications
  class CreateController < ApplicationController
    include Wicked::Wizard
    include BreadcrumbHelper

    before_action :disallow_non_role_users
    before_action :set_notification, except: %i[index]
    before_action :disallow_changing_submitted_notification, except: %i[index]
    before_action :set_steps
    before_action :setup_wizard
    before_action :validate_step, except: %i[index]

    breadcrumb "cases.label", :your_cases_investigations

    TASK_LIST_SECTIONS = {
      "notification_details" => %i[add_product_notification_details add_product_safety_and_compliance_details],
      "business_details" => %i[search_or_add_a_new_business],
      "evidence" => %i[select_evidence add_test_reports add_supporting_images create_or_add_risk_assessment],
      "corrective_actions" => %i[record_product_corrective_actions],
      "submit" => %i[check_notification_details_and_submit]
    }.freeze

    def index
      if params[:notification_pretty_id].present?
        set_notification
        disallow_changing_submitted_notification
      else
        # Create a new draft notification then redirect to it
        investigation = Investigation::Notification.new(state: "draft")
        CreateCase.call!(investigation:, user: current_user, from_task_list: true, silent: true)
        redirect_to notification_create_index_path(investigation)
      end
    end

    def show
      render_wizard
    end

    def update; end

  private

    def disallow_non_role_users
      redirect_to notifications_path unless current_user.can_use_notification_task_list?
    end

    def set_notification
      @notification = Investigation::Notification.includes(:creator_user).where(pretty_id: params[:notification_pretty_id], creator_user: { id: current_user.id }).where.not(state: "submitted").first!
    end

    def disallow_changing_submitted_notification
      # TODO(ruben): redirect to view notification page once ready
      redirect_to notifications_path if @notification.submitted?
    end

    def set_steps
      self.steps = TASK_LIST_SECTIONS.values.flatten
    end

    def validate_step
      # Don't allow access to a step if the step before has not yet been completed.
      # Checks if the step is the first step or the autogenerated "finish" step.
      redirect_to notification_create_index_path(@notification) unless step == previous_step || step == :wizard_finish || @notification.tasks_status[previous_step.to_s] == "completed"
    end

    def finish_wizard_path
      notification_create_index_path(@notification)
    end
  end
end
