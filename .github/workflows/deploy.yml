name: Deploy

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy to Staging and Production
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      elasticsearch:
        image: elasticsearch:7.9.2
        ports: ["9200:9200"]
        options: -e="discovery.type=single-node" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
    - uses: actions/checkout@v1
    - name: Install cf client
      env:
        CF_CLI_VERSION: v7
      run: |
        mkdir -p $GITHUB_WORKSPACE/bin
        curl -L "https://packages.cloudfoundry.org/stable?release=linux64-binary&version=${CF_CLI_VERSION}" | tar -zx -C $GITHUB_WORKSPACE/bin
        echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

    - name: Create GitHub deployment for Staging
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        BRANCH: master
      run: |
        source deploy-github-functions.sh
        gh_deploy_create staging

    - name: Initiate Staging deployment status
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh

        # URL where the deployment progress can be tracked. Exported for future steps.
        log_url=$(echo "https://github.com/$GITHUB_REPOSITORY/actions?query=branch%3Amaster+workflow%3ADeploy")
        echo "LOG_URL=$log_url" >> $GITHUB_ENV

        gh_deploy_initiate staging $log_url

    - name: Deploy to staging
      env:
        SPACE: staging
        APP_NAME: psd-web
        DOMAIN: staging.product-safety-database.service.gov.uk
        WEB_DISK_QUOTA: 2G
        WORKER_DISK_QUOTA: 2G
        WEB_MEMORY: 2G
        WORKER_MEMORY: 1G
        WEB_INSTANCES: 1
        WORKER_INSTANCES: 1
        WEB_MAX_THREADS: 5
        WORKER_MAX_THREADS: 10
        CF_USERNAME: ${{ secrets.PaaSUsernameStaging }}
        CF_PASSWORD: ${{ secrets.PaaSPasswordStaging }}
      run: |
        cf api api.london.cloud.service.gov.uk
        cf auth
        cf target -o 'beis-opss' -s $SPACE
        chmod +x ./deploy.sh
        ./deploy.sh
        cf logout

    - name: Update Staging deployment status (success)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh
        environment_url=https://staging.product-safety-database.service.gov.uk/
        gh_deploy_success staging $LOG_URL $environment_url

    - name: Update Staging deployment status (failure)
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh
        gh_deploy_failure staging $LOG_URL

    - name: Set up Ruby
      if: success()
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7.x

    - name: Set up Node
      if: success()
      uses: actions/setup-node@v1
      with:
        node-version: 14.17.x

    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-no-dev-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install RubyGems
      if: success()
      run: |
        gem install bundler --no-doc
        bundle config path vendor/bundle
        bundle check || bundle install --without development --jobs=4 --retry=3

    - name: Install yarn
      if: success()
      run: npm install yarn -g

    - name: Get yarn cache
      if: success()
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Node.js dependencies
      if: success()
      run: yarn install

    - name: Prepare database
      if: success()
      run: bin/rails parallel:load_schema

    - name: Run Smoke Tests
      if: success()
      env:
        ELASTICSEARCH_URL: localhost
        RAILS_ENV: test
        SMOKE_USER: ${{secrets.SMOKE_USER}}
        SMOKE_PASSWORD: ${{secrets.SMOKE_PASSWORD}}
        SMOKE_RELAY_CODE_URL: ${{secrets.SMOKE_RELAY_CODE_URL}}
        SMOKE_RELAY_CODE_USER: ${{secrets.SMOKE_RELAY_CODE_USER}}
        SMOKE_RELAY_CODE_PASS: ${{secrets.SMOKE_RELAY_CODE_PASS}}
        RUN_SMOKE: "true"
        IS_REVIEW_APP: "false"
        SMOKE_TEST_URL: "https://staging.product-safety-database.service.gov.uk"

      run: |
        bundle exec rspec spec/smoke/smoke_test_spec.rb

    - name: Create GitHub deployment for Production
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
        BRANCH: master
      run: |
        source deploy-github-functions.sh
        gh_deploy_create production

    - name: Initiate Production deployment status
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh
        gh_deploy_initiate production $LOG_URL

    - name: Deploy to production
      env:
        SPACE: prod
        APP_NAME: psd-web
        DOMAIN: www.product-safety-database.service.gov.uk
        WEB_DISK_QUOTA: 2G
        WORKER_DISK_QUOTA: 2G
        WEB_MEMORY: 2G
        WORKER_MEMORY: 1G
        WEB_INSTANCES: 4
        WORKER_INSTANCES: 2
        WEB_MAX_THREADS: 5
        WORKER_MAX_THREADS: 10
        CF_USERNAME: ${{ secrets.PaaSUsernameProduction }}
        CF_PASSWORD: ${{ secrets.PaaSPasswordProduction }}
      run: |
        cf api api.london.cloud.service.gov.uk
        cf auth
        cf target -o 'beis-opss' -s $SPACE
        ./deploy.sh
        cf logout

    - name: Update Production deployment status (success)
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh
        environment_url=https://www.product-safety-database.service.gov.uk/
        gh_deploy_success production $LOG_URL $environment_url

    - name: Update Production deployment status (failure)
      if: failure()
      env:
        GITHUB_TOKEN: ${{ secrets.GithubApiDeploymentToken }}
      run: |
        source deploy-github-functions.sh
        gh_deploy_failure production $LOG_URL

    - name: Set up Ruby
      if: success()
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7.x

    - name: Set up Node
      if: success()
      uses: actions/setup-node@v1
      with:
        node-version: 14.17.x

    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-no-dev-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install RubyGems
      if: success()
      run: |
        gem install bundler --no-doc
        bundle config path vendor/bundle
        bundle check || bundle install --without development --jobs=4 --retry=3

    - name: Install yarn
      if: success()
      run: npm install yarn -g

    - name: Get yarn cache
      if: success()
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Node.js dependencies
      if: success()
      run: yarn install

    - name: Prepare database
      if: success()
      run: bin/rails parallel:load_schema

    - name: Run Smoke Tests
      if: success()
      env:
        ELASTICSEARCH_URL: localhost
        RAILS_ENV: test
        SMOKE_USER: ${{secrets.SMOKE_USER}}
        SMOKE_PASSWORD: ${{secrets.SMOKE_PASSWORD}}
        SMOKE_RELAY_CODE_URL: ${{secrets.SMOKE_RELAY_CODE_URL}}
        SMOKE_RELAY_CODE_USER: ${{secrets.SMOKE_RELAY_CODE_USER}}
        SMOKE_RELAY_CODE_PASS: ${{secrets.SMOKE_RELAY_CODE_PASS}}
        RUN_SMOKE: "true"
        IS_REVIEW_APP: "false"
        SMOKE_TEST_URL: "https://www.product-safety-database.service.gov.uk/"

      run: |
        bundle exec rspec spec/smoke/smoke_test_spec.rb

    - name: Alert team via Slack of deployment failure
      if: failure()
      env:
        SLACK_WEBHOOK: ${{ secrets.SlackWebhookUrl }}
      run: |
        curl -X POST --data-urlencode "payload={\"channel\": \"#alerts\", \"username\": \"deploybot\", \"text\": \"Deploy has failed!\n\nSee $LOG_URL\", \"icon_emoji\": \":fire:\"}" $SLACK_WEBHOOK
