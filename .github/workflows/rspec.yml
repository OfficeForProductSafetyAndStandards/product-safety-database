name: RSpec test suite

on: [push]

env:
  DATABASE_URL: postgres://postgres@localhost:5432
  OPENSEARCH_URL: https://admin:admin@localhost:9200
  REDIS_URL: redis://localhost:6379
  RAILS_ENV: test
  ANTIVIRUS_URL: http://localhost:3006/safe
  ANTIVIRUS_USERNAME: av
  ANTIVIRUS_PASSWORD: password
  PSD_HOST: example.com
  EMAIL_WHITELIST_ENABLED: false
  TWO_FACTOR_AUTHENTICATION_ENABLED: false
  CI: true

jobs:
  ruby:
    name: "Tests"
    runs-on: ubuntu-latest

    # Example for can be found here:
    # https://github.com/actions/example-services/tree/master/.github/workflows
    services:
      postgres:
        image: postgres:11.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: postgres
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      opensearch:
        image: opensearchproject/opensearch:latest
        ports: ["9200:9200"]
        options: -e="discovery.type=single-node" --health-cmd="curl -XGET https://localhost:9200/_cluster/health -u admin:admin --insecure" --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis
        ports:
        - 6379:6379
        options: --entrypoint redis-server

    strategy:
      fail-fast: false
      matrix:
        rspec-folder:
          - spec/active_model
          - spec/decorators
          - spec/forms
          - spec/helpers spec/jobs spec/mailers spec/policies
          - spec/models spec/validators
          - spec/requests
          - --tag with_opensearch spec/features
          - --tag ~with_opensearch spec/features
          - --tag with_opensearch spec/services
          - --tag ~with_opensearch spec/services
          - $(ls -d spec/*/ | grep -v -E 'decorators|models|active_model|forms|jobs|mailers|requests|features|policies|services|helpers|validators')

    steps:
    - uses: actions/checkout@v1

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: 14.18.x

    - name: Install PostgreSQL client
      run: sudo apt-get install libpq-dev

    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-no-dev-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install RubyGems
      run: |
        gem install bundler --no-doc
        bundle config path vendor/bundle
        bundle check || bundle install --without development --jobs=4 --retry=3

    - name: Install yarn
      run: npm install yarn -g

    - name: Get yarn cache
      id: yarn-cache
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      with:
        path: ${{ steps.yarn-cache.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install Node.js dependencies
      run: yarn install

    - name: Prepare database
      run: bin/rails parallel:load_schema

    - name: Dump docker logs
      uses: jwalton/gh-docker-logs@v1
      with:
        images: 'opensearchproject/opensearch'

    - name: Run Specs
      run: |
        bundle exec rspec ${{ matrix.rspec-folder }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1

    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: capybara screenshots
        path: tmp/capybara
